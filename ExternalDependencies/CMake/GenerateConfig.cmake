# Convenience function for generating config.h files
include(CheckFunctionExists)
include(CheckSymbolExists)
include(CheckIncludeFile)
include(CheckLibraryExists)
include(CheckTypeSize)
include(AC_HEADER_STDC)

function(default_type type_name default_type)
    check_type_size(${type_name} SIZEOF)
    if(NOT SIZEOF)
        set(${type_name} ${default_type} PARENT_SCOPE)
    endif()
endfunction()

function(generate_config template_file output_file)
    # TODO: This is not the right way to handle Debug maybe?
    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
        set(ENABLE_DEBUG 1)
    endif()
    check_stdc_headers(STDC_HEADERS)

    default_type(off_t "long")
    default_type(size_t "unsigned int")
    default_type(ssize_t "int")

    check_type_size("__int64" SIZEOF___INT64)
    check_type_size("int" SIZEOF_INT)
    check_type_size("long" SIZEOF_LONG)
    check_type_size("long long" SIZEOF_LONG_LONG)
    check_type_size("short" SIZEOF_SHORT)
    check_type_size("_Bool" _BOOL)

    # check_type_size also populates a HAVE_${VARIABLE}
    check_type_size("__uint32_t" __UINT32_T BUILTIN_TYPES_ONLY)
    # Without BUILTIN_TYPES_ONLY check_type_size looks in sys/types.h
    check_type_size("__uint32_t" __UINT32_T_IN_SYS_TYPES_H)
    check_symbol_exists("__uint32_t" "sgidefs.h" HAVE___UINT32_T_IN_SGIDEFS_H)

    check_type_size("__uint64_t" __UINT64_T BUILTIN_TYPES_ONLY)
    check_type_size("__uint64_t" __UINT64_T_IN_SYS_TYPES_H)
    check_symbol_exists("__uint64_t" "sgidefs.h" HAVE___UINT64_T_IN_SGIDEFS_H)

    check_function_exists("mmap" HAVE_MMAP)
    check_function_exists("catgets" HAVE_CATGETS)
    check_function_exists("dgettext" HAVE_DGETTEXT)
    check_function_exists("ftruncate" HAVE_FTRUNCATE)
    check_function_exists("getpagesize" HAVE_GETPAGESIZE)
    check_function_exists("memcmp" HAVE_MEMCMP)
    check_function_exists("memcpy" HAVE_MEMCPY)
    check_function_exists("memmove" HAVE_MEMMOVE)
    check_function_exists("memset" HAVE_MEMSET)
    check_function_exists("alloca" HAVE_ALLOCA)
    check_function_exists("malloc" HAVE_MALLOC)
    check_function_exists("realloc" HAVE_REALLOC)
    check_function_exists("clock_gettime" HAVE_CLOCK_GETTIME)
    check_function_exists("isascii" HAVE_ISASCII)
    check_function_exists("mbrtowc" HAVE_MBRTOWC)
    check_function_exists("nl_langinfo" HAVE_NL_LANGINFO)
    check_function_exists("regcomp" HAVE_REGCOMP)
    check_function_exists("re_comp" HAVE_RE_COMP)
    check_function_exists("setlocale" HAVE_SETLOCALE)
    check_function_exists("strcpy" HAVE_STPCPY)
    check_function_exists("strcasecmp" HAVE_STRCASECMP)
    check_function_exists("strchr" HAVE_STRCHR)

    if(MSVC)
        set(HAVE_STDAFX_H 1)
    endif()
    check_include_file("ar.h" HAVE_AR_H)
    check_include_file("fcntl.h" HAVE_FCNTL_H)
    check_include_file("gelf.h" HAVE_GELF_H)
    check_include_file("libelf/libelf.h" HAVE_LIBELF_LIBELF_H)
    check_include_file("link.h" HAVE_LINK_H)
    check_include_file("nlist.h" HAVE_NLIST_H)
    check_include_file("stdint.h" HAVE_STDINT_H)
    check_include_file("stdlib.h" HAVE_STDLIB_H)
    check_include_file("strings.h" HAVE_STRINGS_H)
    check_include_file("string.h" HAVE_STRING_H)
    check_include_file("sys_elf.h" HAVE_SYS_ELF_H)
    check_include_file("sys_link.h" HAVE_SYS_LINK_H)
    check_include_file("unistd.h" HAVE_UNISTD_H)
    check_include_file("stdafx.h" HAVE_STDAFX_H)
    check_include_file("alloca.h" HAVE_ALLOCA_H)
    check_include_file("inttypes.h" HAVE_INTTYPES_H)
    check_include_file("memory.h" HAVE_MEMORY_H)
    check_include_file("sys/stat.h" HAVE_SYS_STAT_H)
    check_include_file("sys/types.h" HAVE_SYS_TYPES_H)
    check_include_file("dlfcn.h" HAVE_DLFCN_H)
    check_include_file("langinfo.h" HAVE_LANGINFO_H)
    check_include_file("libintl.h" HAVE_LIBINTL_H)
    check_include_file("limits.h" HAVE_LIMITS_H)
    check_include_file("locale.h" HAVE_LOCALE_H)
    check_include_file("stdbool.h" HAVE_STDBOOL_H)
    check_include_file("wchar.h" HAVE_WCHAR_H)
    check_include_file("wctype.h" HAVE_WCTYPE_H)

    # LibElf Specific
    # We always use internal libelf
    set(__LIBELF_INTERNAL__ 1)
    set(HAVE_LIBELF_H 1)
    if(UNIX)
        check_include_file("elf.h" HAVE_ELF_H)
        if(HAVE_ELF_H)
            set(__LIBELF_HEADER_ELF_H "<elf.h>")
        # else()
        #     check_include_file("sys/elf.h" HAVE_SYSELF_H)
        #     if(HAVE_SYSELF_H)
        #         set(__LIBELF_HEADER_ELF_H "<sys/elf.h>")
        #     endif()
        endif()
    endif()
    check_symbol_exists("nlist" "elf.h;sys/elf.h" HAVE_STRUCT_NLIST_DECLARATION)
    check_symbol_exists("Elf32_Dyn" "link.h" __LIBELF_NEED_LINK_H)
    check_symbol_exists("Elf32_Dyn" "sys/link.h" __LIBELF_NEED_SYS_LINK_H)
    set(__LIBELF64 1)
    if(UNIX AND NOT APPLE)
        set(__LIBELF64_LINUX 1)
    endif()
    set(__LIBELF_SYMBOL_VERSIONS, 1)
    set(__LIBELF_SUN_SYMBOL_VERSIONS, 1)

    if(SIZEOF_LONG EQUAL 8)
        set(__libelf_i64_t "long")
    elseif(SIZEOF___INT64 EQUAL 8)
        set(__libelf_i64_t "__int64")
    elseif(SIZEOF_LONG_LONG EQUAL 8)
        set(__libelf_i64_t "long long")
    endif()
    set(__libelf_u64_t "unsigned ${__libelf_i64_t}")

    if(SIZEOF_INT EQUAL 4)
        set(__libelf_i32_t "int")
    elseif(SIZEOF_LONG EQUAL 4)
        set(__libelf_i32_t "long")
    endif()
    set(__libelf_u32_t "unsigned ${__libelf_i32_t}")

    if(SIZEOF_SHORT EQUAL 2)
        set(__libelf_i16_t "short")
    elseif(SIZEOF_INT EQUAL 2)
        set(__libelf_i16_t "int")
    endif()
    set(__libelf_u16_t "unsigned ${__libelf_i16_t}")

    # LibTsearch Specific
    if(MSVC)
        set(TSEARCH_USE_GNU 1)
    else()
        set(TSEARCH_USE_HASH 1)
    endif()

    # LibDwarf Specific
    # We aren't using system libelf, so these don't have to be worked out
    set(HAVE_ELF64_GETEHDR 1)
    set(HAVE_ELF64_GETSHDR 1)
    set(HAVE_ELF64_RELA 1)
    set(HAVE_ELF64_SYM 1)
    set(HAVE_RAW_LIBELF_OK 1)
    set(HAVE_ZLIB 1)
    if(MSVC)
        set(HAVE_NONSTANDARD_PRINTF_64_FORMAT 1)
        set(HAVE_WINDOWS_PATH 1)
    else()
        set(HAVE_UNUSED_ATTRIBUTE 1)
    endif()

    # DwarfDump Specific
    if("${PROJECTNAME}" STREQUAL "DwarfValidation")
        set(HAVE_REGEX 1)
    endif()

    set(HAVE_ELF64_R_INFO 1)

    # LibRegex Specific
    set(int32_t __libelf_i32_t)
    set(uint32_t __libelf_u32_t)

    configure_file("${template_file}" "${output_file}")
endfunction()
